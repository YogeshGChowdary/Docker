#Normal Dockerfile

# use an official OpenJDK runtime as a parent image
FROM openjdk:17-jdk-slim

# Set the working directory inside the container
WORKDIR /app

# Copy the project files to the container
COPY . .

# Package the appication (this will create a jar file in the targer directory)
RUN ./mvnw package -DskipTests

# Expose the port the application runs on
EXPOSE 8080

# Run the jar file
CMD [ "java", "-jar", "app.jar" ]

#------------------------------------------------------------
# Multi-Stage Dockerfile
# Stage-1: Build stage

FROM maven:3.8.5-openjdk-17-slim AS build
WORKDIR /app
COPY . .
RUN ./mvnw package -DskipTests

# Stage-2: Runtime stage

FROM openjdk:17-jdk-slim AS runtime
WORKDIR /app
COPY --from=build /app/target/*.jar app.jar
EXPOSE 8080
CMD [ "java", "-jar", "app.jar" ]


# # When the command COPY . . is executed, it copies the entire project directory, including all files and subdirectories, into the container at the specified location (/app).
    # This means that all files in the project directory, including:
    #     Source code files (e.g., Java files, etc.)
    #     Configuration files (e.g., pom.xml, etc.)
    #     Resources files (e.g., images, etc.)
    #     Test files
    #     Any other files and directories in the project
    #     are copied into the container.
    #     By copying the entire project directory, the COPY command ensures that all necessary files are available in the container for building the image. This includes files required for compiling, testing, and packaging the application.
    #     Note that this approach can lead to a larger image size, as all project files are included, even if not necessary for the final application. To optimize image size, you can use more specific COPY commands to only include necessary files.
#------------------------------------------------------------------------------------    
    
# the command can be like mvn package -DskipTests.
    # The existing command ./mvnw package -DskipTests uses the Maven Wrapper (mvnw) to execute the package phase, skipping tests.
    # The difference between the two commands is:
    # ./mvnw is the Maven Wrapper, which is a script that downloads and runs Maven if it's not already installed. It's used to ensure consistency and ease of use.
    # mvn is the direct Maven command.
    # Both commands achieve the same goal - packaging the application - but:
    # ./mvnw ensures Maven is installed and configured correctly, even if it's not already present on the system.
    # mvn assumes Maven is already installed and configured.
    # In a Dockerfile, using ./mvnw ensures that the build process is consistent and reliable, even in environments where Maven might not be installed.
#----------------------------------------------------------------------------------------

# The command CMD [ "java", "-jar", "app.jar" ] is the default command to run when the container is started.
    # Here's what it does:
    # java is the command to run the Java Virtual Machine (JVM).
    # -jar is an option to specify the JAR file to run.
    # app.jar is the name of the JAR file to run.
    # When the container is started, this command will run the app.jar file with the JVM, effectively starting the Java application.
    # The expected output will be the output of the Java application, which can vary depending on the application's logic. Some common outputs include:
    # Console output (e.g., log messages, application output)
    # Error messages (if the application encounters errors)
    # Exit code (if the application exits normally or abnormally)
    # In this case, the output will likely be the console output of the Java application, which can be viewed using docker logs or by running the container with docker run -it and observing the output in the terminal.